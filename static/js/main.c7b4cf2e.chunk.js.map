{"version":3,"sources":["ApiUtils.js","Utils.js","Dashboard/TilesCard.js","Dashboard/MemoryUsage.js","Dashboard/ProcessesLineChart.js","Dashboard/LatencyBarChart.js","App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","API_URLS","tilesUrl","memoryUsageUrl","processesUrl","latencyUrl","makeApi","config","doCancelRequest","CancelToken","axios","method","headers","Accept","withCredentials","undefined","cancelToken","cancelHttpRequest","then","response","catch","Utils","num","pattern","test","toString","replace","isNaN","convertDigitWithCommas","Math","round","TilesCard","useState","loader","setLoader","projectCount","setProjectCount","mailCount","setMailCount","ticketCount","setTicketCount","customerCount","setCustomerCount","tilesList","name","key","id","value","iconName","iconClass","color","getTilesData","a","url","res","data","projects","mails","tickets","customers","console","error","useEffect","className","map","item","style","convertDigit","Array","from","length","index","barColumnChartData","series","options","chart","type","height","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","grid","borderColor","strokeDashArray","stroke","show","width","colors","xaxis","categories","yaxis","title","text","fill","opacity","tooltip","y","formatter","val","legend","position","horizontalAlign","totalData","freeData","usedData","months","MemoryUsage","chartData","setChartData","getProcessesData","tempData","total","used","free","barChartData","zoom","toolbar","background","shared","intersect","x","lines","labels","axisBorder","axisTicks","defaultData","ProcessesLineChart","setValue","lineChartData","LatencyBarChart","milliSecs","setMilliSecs","getLatencyData","millisecs","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7b4cf2e.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = \"https://60a55fccc0c1fd00175f3cf5.mockapi.io\";\n\nexport const API_URLS = {\n  tilesUrl: `${BASE_URL}/getTilesData/latencyData`,\n  memoryUsageUrl: `${BASE_URL}/getTilesData/MemoryUsage`,\n  processesUrl: `${BASE_URL}/getTilesData/processesData`,\n  latencyUrl: `${BASE_URL}/getTilesData/latencyData`\n};\n\nexport const makeApi = (config, doCancelRequest) => {\n  const { CancelToken } = axios;\n  config.method = config.method || \"GET\";\n  config.headers = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Credentials\": true,\n    \"Access-Control-Allow-Headers\": \"X-Requested-With,content-type\",\n    \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS, PUT, PATCH, DELETE\"\n  };\n  config.withCredentials = true;\n  if (doCancelRequest !== undefined) {\n    config.cancelToken = new CancelToken(function executor(cancelHttpRequest) {\n      doCancelRequest(cancelHttpRequest);\n    });\n  }\n  return axios(config)\n    .then(response => {\n      return response;\n    })\n    .catch(response => {\n      return response;\n    });\n};\n","const Utils = {};\n\nUtils.convertDigitWithCommas = num => {\n  if (num) {\n    const pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(num?.toString())) {\n      num = num.replace(pattern, \"$1,$2\");\n    }\n    return num;\n  }\n  return 0;\n};\n\nUtils.convertDigit = num => {\n  return !num && isNaN(num)\n    ? 0\n    : num < 9999\n    ? num\n    : num < 1000000 &&\n    Utils.convertDigitWithCommas(Math.round(num / 1000) + \"K\");\n};\n\nexport default Utils;\nexport { Utils };\n","import React, { useState, useEffect } from \"react\";\nimport { makeApi, API_URLS } from \"../ApiUtils\";\nimport { Utils } from \"../Utils\";\n\nexport const TilesCard = () => {\n  const [loader, setLoader] = useState(true);\n  const [projectCount, setProjectCount] = useState(0);\n  const [mailCount, setMailCount] = useState(0);\n  const [ticketCount, setTicketCount] = useState(0);\n  const [customerCount, setCustomerCount] = useState(0);\n\n  const tilesList = [\n    {\n      name: \"Projects\",\n      key: \"projects\",\n      id: \"projects\",\n      value: projectCount,\n      iconName: \"navigation\",\n      iconClass: \"material-icons-outlined\",\n      color: \"greenyellow\"\n    },\n    {\n      name: \"Mails\",\n      key: \"mails\",\n      id: \"mails\",\n      value: mailCount,\n      iconName: \"mail\",\n      iconClass: \"material-icons-outlined\",\n      color: \"#f48e13\"\n    },\n    {\n      name: \"Tickets\",\n      key: \"tickets\",\n      id: \"tickets\",\n      value: ticketCount,\n      iconName: \"book_online\",\n      iconClass: \"material-icons-outlined\",\n      color: \"#03A9F4\"\n    },\n    {\n      name: \"Customers\",\n      key: \"customers\",\n      id: \"customers\",\n      value: customerCount,\n      iconName: \"group\",\n      iconClass: \"material-icons-outlined\",\n      color: \"#f6719d\"\n    }\n  ];\n\n  const getTilesData = async () => {\n    try {\n      const config = {\n        url: API_URLS.tilesUrl\n      };\n      let res = await makeApi(config);\n      const { projects = 30, mails = 234, tickets = 456, customers = 5987 } =\n        res?.data?.[0] || {};\n      setMailCount(mails);\n      setCustomerCount(customers);\n      setProjectCount(projects);\n      setTicketCount(tickets);\n      setLoader(false);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getTilesData();\n  }, []);\n\n  return (\n    <div className=\"row\">\n      {!loader &&\n        tilesList.map(item => {\n          const {\n            key = \"\",\n            name = \"\",\n            id = \"\",\n            value = \"\",\n            iconName = \"\",\n            iconClass = \"\",\n            color = \"\"\n          } = item;\n          return (\n            <div\n              className=\"col-12 col-xs-6 col-sm-6 col-md-3 col-lg-3 col-xl-2 mb-3 mb-sm-4\"\n              key={key}\n              id={id}\n            >\n              <div className=\"tileCard p-3 p-md-2 pd-lg-3\">\n                <i className={iconClass} style={{ color: color }}>\n                  {iconName}\n                </i>\n                <div className=\"tileBody\">\n                  <h6 className=\"name\">{name}</h6>\n                  <div className=\"value\">{Utils.convertDigit(value)}</div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      {loader &&\n        Array.from({ length: 4 }, (value, index) => (\n          <div\n            className=\"col-12 col-xs-6 col-sm-6 col-md-3 col-lg-3 col-xl-2\"\n            key={`tileloader${index}`}\n          >\n            <div className=\"tileCardLoader p-3 p-md-2\">\n              <span className=\"icon linearBackground\" />\n              <div className=\"tileBody\">\n                <span className=\"name linearBackground\" />\n                <span className=\"value linearBackground\" />\n              </div>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TilesCard;\n","import React, { useState, useEffect } from \"react\";\nimport { makeApi, API_URLS } from \"../ApiUtils\";\nimport Chart from \"react-apexcharts\";\n\nconst barColumnChartData = {\n  series: [\n    {\n      name: \"TOTAL\",\n      data: []\n    },\n    {\n      name: \"USED\",\n      data: []\n    },\n    {\n      name: \"FREE\",\n      data: []\n    }\n  ],\n  options: {\n    chart: {\n      type: \"bar\",\n      height: 350\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: \"55%\",\n        endingShape: \"rounded\"\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    grid: { borderColor: \"#eee\", strokeDashArray: 7 },\n    stroke: {\n      show: true,\n      width: 2,\n      colors: [\"transparent\"]\n    },\n    colors: [\"#f48e13\", \"#f6719d\", \"#03A9F4\"],\n    xaxis: {\n      categories: [\"Feb\", \"May\", \"Aug\"]\n    },\n    yaxis: {\n      title: {\n        text: \"$ (thousands)\"\n      }\n    },\n    fill: {\n      opacity: 1\n    },\n    tooltip: {\n      y: {\n        formatter: function (val) {\n          return \"$ \" + val + \" thousands\";\n        }\n      }\n    },\n    legend: {\n      position: \"top\",\n      horizontalAlign: \"left\"\n    }\n  }\n};\n\nconst totalData = [300, 120, 60, 300, 50];\nconst freeData = [200, 40, 40, 240, 10];\nconst usedData = [100, 80, 20, 60, 40];\nconst months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"];\n\nconst MemoryUsage = () => {\n  const [loader, setLoader] = useState(true);\n  const [chartData, setChartData] = useState(barColumnChartData);\n\n  const getProcessesData = async () => {\n    try {\n      const config = {\n        url: API_URLS.processesUrl\n      };\n      let res = await makeApi(config);\n      debugger;\n      const tempData = { ...chartData };\n      tempData.series[0].data = res?.data?.length\n        ? res?.data?.[0]?.total\n        : totalData;\n      tempData.series[1].data = res?.data?.length\n        ? res?.data?.[0]?.used\n        : freeData;\n      tempData.series[2].data = res?.data?.length\n        ? res?.data?.[0]?.free\n        : usedData;\n      tempData.options.xaxis.categories = res?.data?.length\n        ? res?.data?.[0]?.months\n        : months;\n      setChartData({ ...chartData, ...tempData });\n      setLoader(false);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getProcessesData();\n  }, []);\n\n  return (\n    <div className=\"memoryUsageSection\">\n      <div className=\"header mb-3 mb-sm-4 d-flex align-items-center justify-content-between\">\n        <span className=\"title\">Memory Usage</span>\n        <div className=\"update d-flex align-items-center\">\n          <i className=\"material-icons pr-1\">refresh</i>\n          <span className=\"btnName\">Update</span>\n        </div>\n      </div>\n      <div className=\"chartSection\">\n        {!loader && (\n          <Chart\n            options={chartData.options}\n            series={chartData.series}\n            type=\"bar\"\n            height={350}\n          />\n        )}\n        {loader && <div className=\"chartLoader\">Loading...</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default MemoryUsage;\n","import React, { useState, useEffect } from \"react\";\nimport { makeApi, API_URLS } from \"../ApiUtils\";\nimport Chart from \"react-apexcharts\";\nimport { Utils } from \"../Utils\";\n\nconst barChartData = {\n  series: [\n    {\n      name: \"\",\n      data: []\n    }\n  ],\n  options: {\n    chart: {\n      type: \"line\",\n      zoom: {\n        enabled: false\n      },\n      toolbar: {\n        show: false\n      }\n    },\n    dataLabels: {\n      enabled: false,\n      background: {\n        enabled: false\n      }\n    },\n    stroke: {\n      width: [3, 3]\n    },\n    tooltip: {\n      shared: false,\n      intersect: true,\n      x: {\n        show: false\n      }\n    },\n    grid: {\n      xaxis: {\n        lines: {\n          show: false\n        }\n      },\n      yaxis: {\n        lines: {\n          show: false\n        }\n      }\n    },\n    colors: [\"#f6719d\"],\n    xaxis: {\n      labels: {\n        show: false\n      },\n      tooltip: {\n        enabled: false\n      },\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      }\n    },\n    yaxis: {\n      labels: {\n        show: false\n      }\n    },\n    legend: {\n      show: false\n    }\n  }\n};\n\nconst defaultData = [\n  80,\n  41,\n  55,\n  71,\n  39,\n  62,\n  69,\n  91,\n  148,\n  10,\n  20,\n  30,\n  40,\n  50,\n  60\n];\n\nconst ProcessesLineChart = () => {\n  const [loader, setLoader] = useState(true);\n  const [chartData, setChartData] = useState(barChartData);\n  const [value, setValue] = useState(\"\");\n\n  const getProcessesData = async () => {\n    try {\n      const config = {\n        url: API_URLS.processesUrl\n      };\n      let res = await makeApi(config);\n      const tempData = { ...chartData };\n      tempData.series[0].data = res?.data?.length\n        ? res?.data?.[0]?.data\n        : defaultData;\n      setChartData({ ...chartData, ...tempData });\n      setValue(res?.data?.[0]?.value || 1597);\n      setLoader(false);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getProcessesData();\n  }, []);\n\n  return (\n    <div className=\"processesLineChartSection\">\n      <div className=\"row\">\n        <div className=\"col-12 order-1 col-sm-12 col-md-6 col-lg-7 order-sm-1  order-md-0 chartSection\">\n          {!loader && (\n            <Chart\n              options={chartData.options}\n              series={chartData.series}\n              type=\"line\"\n              height={110}\n            />\n          )}\n          {loader && <div className=\"chartLoader\">Loading...</div>}\n        </div>\n        <div className=\"processData order-0 mt-3 mt-sm-4 mt-sm-3 mt-md-0 col-12 col-sm-12 col-md-6 col-lg-5  order-sm-0  order-md-1 align-self-center\">\n          <h6 className=\"title\">PROCESSES</h6>\n          {value && !loader && <div className=\"count\">{Utils.convertDigit(value)}</div>}\n          {loader && <span className=\"linearBackground\" />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProcessesLineChart;\n","import React, { useState, useEffect } from \"react\";\nimport { makeApi, API_URLS } from \"../ApiUtils\";\nimport Chart from \"react-apexcharts\";\n\nconst lineChartData = {\n  series: [\n    {\n      name: \"Latency\",\n      data: []\n    }\n  ],\n  options: {\n    chart: {\n      height: 150,\n      type: \"bar\",\n      toolbar: {\n        show: false\n      }\n    },\n    dataLabels: {\n      enabled: false,\n      background: {\n        enabled: false\n      }\n    },\n    grid: {\n      xaxis: {\n        lines: {\n          show: false\n        }\n      },\n      yaxis: {\n        lines: {\n          show: false\n        }\n      }\n    },\n    colors: [\"#f48e13\"],\n    stroke: {\n      width: [2, 2]\n    },\n    xaxis: {\n      labels: {\n        show: false\n      },\n      tooltip: {\n        enabled: false\n      },\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      }\n    },\n    yaxis: {\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      },\n      labels: {\n        show: false\n      }\n    },\n    legend: {\n      show: false\n    }\n  }\n};\n\nconst defaultData = [\n  2,\n  10,\n  8,\n  7,\n  5,\n  4,\n  3,\n  2,\n  4,\n  14,\n  8,\n  4,\n  10,\n  4,\n  3,\n  3,\n  2,\n  14,\n  8,\n  10,\n  15,\n  12,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11\n];\n\nconst LatencyBarChart = () => {\n  const [loader, setLoader] = useState(true);\n  const [chartData, setChartData] = useState(lineChartData);\n  const [milliSecs, setMilliSecs] = useState(\"\");\n\n  const getLatencyData = async () => {\n    try {\n      const config = {\n        url: API_URLS.latencyUrl\n      };\n      let res = await makeApi(config);\n      const tempData = { ...chartData };\n      tempData.series[0].data = res?.data?.length\n        ? res?.data?.[0]?.data\n        : defaultData;\n      setMilliSecs(res?.data?.[0]?.millisecs || 2.3);\n      setChartData({ ...chartData, ...tempData });\n      setLoader(false);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getLatencyData();\n  }, []);\n\n  return (\n    <div className=\"latencyBarChartSection\">\n      <div className=\"header d-flex align-items-center justify-content-between\">\n        <span className=\"title\">LATENCY</span>\n        {milliSecs && !loader && (\n          <span className=\"seconds\">{milliSecs} ms</span>\n        )}\n        {loader && <span className=\"linearBackground\" />}\n      </div>\n      <div className=\"chartSection\">\n        {!loader && (\n          <Chart\n            options={chartData.options}\n            series={chartData.series}\n            type=\"bar\"\n            height={120}\n          />\n        )}\n        {loader && <div className=\"chartLoader\">Loading...</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default LatencyBarChart;\n","import React from \"react\";\nimport TilesCard from \"./Dashboard/TilesCard\";\nimport MemoryUsage from \"./Dashboard/MemoryUsage\";\nimport ProcessesLineChart from \"./Dashboard/ProcessesLineChart\";\nimport LatencyBarChart from \"./Dashboard/LatencyBarChart\";\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <TilesCard />\n      <div className=\"row\">\n        <div className=\"col-12 col-sm-12 col-md-7 mb-3 mb-sm-4\">\n          <MemoryUsage />\n        </div>\n        <div className=\"col-12 col-sm-12 col-md-5\">\n          <div className=\"row\">\n            <div className=\"col-12 col-sm-6 col-md-12 mb-3 mb-sm-4\">\n              <ProcessesLineChart />\n            </div>\n            <div className=\"col-12 col-sm-6 col-md-12 mb-3 mb-sm-4\">\n              <LatencyBarChart />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}